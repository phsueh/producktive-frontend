{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Development/code/Mod5/phase-5-project/frontend/src/components/NewTaskForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewTaskForm(props) {\n  _s();\n\n  const [taskInfo, setNewTaskInfo] = useState({\n    name: '',\n    description: '',\n    priority: '',\n    difficulty: '',\n    start_date: '',\n    end_date: '',\n    duration: '',\n    status_complete: false,\n    taskable_type: \"Category\",\n    taskable_id: 0\n  }); // const [goals, setGoals] = useState([])\n  // useEffect(() => {\n  //     const foundCategory = props.categories.find((category) => (\n  //         category.id === parseInt(taskInfo.category)))\n  //     let potentialGoals = foundCategory ? foundCategory.goals : []\n  //     setGoals(potentialGoals)\n  // }, [taskInfo.category])\n\n  let allGoals = props.categories.map(category => {\n    let modifiedGoals = category.goals.map(goal => {\n      return { ...goal,\n        name: `${category.name} - ${goal.name}`\n      };\n    });\n    return modifiedGoals;\n  }).flat();\n  let arrOfOptions = taskInfo.taskable_type === \"Category\" ? props.categories : allGoals;\n\n  const handleChange = e => {\n    setNewTaskInfo({ ...taskInfo,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleChangeRadio = e => {\n    setNewTaskInfo({ ...taskInfo,\n      [e.target.name]: e.target.value,\n      taskable_id: arrOfOptions[0] ? arrOfOptions[0].id : 0\n    });\n  };\n\n  console.log(taskInfo);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(taskInfo);\n    fetch(\"http://localhost:3000/createtask\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"authorization\": props.userInfo.token\n      },\n      body: JSON.stringify({\n        name: taskInfo.name,\n        description: taskInfo.description,\n        priority: taskInfo.priority,\n        difficulty: taskInfo.difficulty,\n        start_date: taskInfo.start_date,\n        end_date: taskInfo.end_date,\n        duration: taskInfo.duration,\n        taskable_type: taskInfo.taskable_type,\n        taskable_id: taskInfo.taskable_id,\n        status_complete: false\n      })\n    }).then(res => res.json()).then(task => {\n      if (task.id) {\n        props.addTask(task);\n      }\n\n      setNewTaskInfo({\n        name: '',\n        description: '',\n        priority: '',\n        difficulty: '',\n        start_date: '',\n        end_date: '',\n        duration: '',\n        taskable_type: 'Category',\n        taskable_id: 0,\n        status_complete: false\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"field\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        onChange: handleChange,\n        value: taskInfo.name,\n        id: \"text\",\n        type: \"text\",\n        name: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        onChange: handleChange,\n        value: taskInfo.description,\n        id: \"text\",\n        type: \"text\",\n        name: \"description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"priority\",\n        children: \"Priority\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleChange,\n        className: \"select\",\n        value: taskInfo.priority,\n        type: \"category\",\n        name: \"priority\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          selected: true,\n          hidden: true,\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Must\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Should\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Want\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"difficulty\",\n        children: \"Difficulty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"select\",\n        onChange: handleChange,\n        value: taskInfo.difficulty,\n        type: \"category\",\n        name: \"difficulty\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          selected: true,\n          hidden: true,\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Worst\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Not Bad\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Easy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"start_date\",\n        children: \"Start Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        onChange: handleChange,\n        value: taskInfo.start_date,\n        type: \"date\",\n        name: \"start_date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"end_date\",\n        children: \"End Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        onChange: handleChange,\n        value: taskInfo.end_date,\n        type: \"date\",\n        name: \"end_date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"duration\",\n        children: \"Duration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        onChange: handleChange,\n        value: taskInfo.duration,\n        id: \"text\",\n        type: \"text\",\n        name: \"duration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChangeRadio,\n        checked: taskInfo.taskable_type === \"Category\",\n        name: \"taskable_type\",\n        value: \"Category\",\n        id: \"Category\",\n        type: \"radio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"Category\",\n        children: \"Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChangeRadio,\n        checked: taskInfo.taskable_type === \"Goal\",\n        name: \"taskable_type\",\n        value: \"Goal\",\n        id: \"Goal\",\n        type: \"radio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"Goal\",\n        children: \"Goal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleChange,\n        value: taskInfo.taskable_id,\n        name: \"taskable_id\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: 0,\n          disabled: true,\n          selected: true,\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this), arrOfOptions.map((taskableOption, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: taskableOption.id,\n          children: taskableOption.name\n        }, taskableOption.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"status_complete\",\n        children: \"Complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        value: taskInfo.status_complete,\n        type: \"checkbox\",\n        name: \"status_complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        value: \"submit\",\n        type: \"submit\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NewTaskForm, \"C39p1lA0MJwQzGmizDEpMf9Nr84=\");\n\n_c = NewTaskForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTaskForm\");","map":{"version":3,"sources":["/Users/paul/Development/code/Mod5/phase-5-project/frontend/src/components/NewTaskForm.js"],"names":["React","useState","useEffect","NewTaskForm","props","taskInfo","setNewTaskInfo","name","description","priority","difficulty","start_date","end_date","duration","status_complete","taskable_type","taskable_id","allGoals","categories","map","category","modifiedGoals","goals","goal","flat","arrOfOptions","handleChange","e","target","value","handleChangeRadio","id","console","log","handleSubmit","preventDefault","fetch","method","headers","userInfo","token","body","JSON","stringify","then","res","json","task","addTask","taskableOption","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAEvC,QAAM,CAACC,QAAD,EAAWC,cAAX,IAA6BL,QAAQ,CAAC;AACxCM,IAAAA,IAAI,EAAE,EADkC;AAExCC,IAAAA,WAAW,EAAE,EAF2B;AAGxCC,IAAAA,QAAQ,EAAE,EAH8B;AAIxCC,IAAAA,UAAU,EAAE,EAJ4B;AAKxCC,IAAAA,UAAU,EAAE,EAL4B;AAMxCC,IAAAA,QAAQ,EAAE,EAN8B;AAOxCC,IAAAA,QAAQ,EAAE,EAP8B;AAQxCC,IAAAA,eAAe,EAAE,KARuB;AASxCC,IAAAA,aAAa,EAAE,UATyB;AAUxCC,IAAAA,WAAW,EAAE;AAV2B,GAAD,CAA3C,CAFuC,CAcvC;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,QAAQ,GAAGb,KAAK,CAACc,UAAN,CAAiBC,GAAjB,CAAsBC,QAAD,IAAc;AAC9C,QAAIC,aAAa,GAAGD,QAAQ,CAACE,KAAT,CAAeH,GAAf,CAAoBI,IAAD,IAAU;AAC7C,aAAO,EAAC,GAAGA,IAAJ;AAAUhB,QAAAA,IAAI,EAAG,GAAEa,QAAQ,CAACb,IAAK,MAAKgB,IAAI,CAAChB,IAAK;AAAhD,OAAP;AACH,KAFmB,CAApB;AAGA,WAAOc,aAAP;AACH,GALc,EAKZG,IALY,EAAf;AAOA,MAAIC,YAAY,GAAGpB,QAAQ,CAACU,aAAT,KAA2B,UAA3B,GAAwCX,KAAK,CAACc,UAA9C,GAA2DD,QAA9E;;AAEA,QAAMS,YAAY,GAAIC,CAAD,IAAO;AACxBrB,IAAAA,cAAc,CAAC,EACX,GAAGD,QADQ;AAEX,OAACsB,CAAC,CAACC,MAAF,CAASrB,IAAV,GAAiBoB,CAAC,CAACC,MAAF,CAASC;AAFf,KAAD,CAAd;AAIH,GALD;;AAOA,QAAMC,iBAAiB,GAAIH,CAAD,IAAO;AAC7BrB,IAAAA,cAAc,CAAC,EACX,GAAGD,QADQ;AAEX,OAACsB,CAAC,CAACC,MAAF,CAASrB,IAAV,GAAiBoB,CAAC,CAACC,MAAF,CAASC,KAFf;AAGXb,MAAAA,WAAW,EAAES,YAAY,CAAC,CAAD,CAAZ,GAAkBA,YAAY,CAAC,CAAD,CAAZ,CAAgBM,EAAlC,GAAuC;AAHzC,KAAD,CAAd;AAKH,GAND;;AAQAC,EAAAA,OAAO,CAACC,GAAR,CAAY5B,QAAZ;;AAEA,QAAM6B,YAAY,GAAIP,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACQ,cAAF;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY5B,QAAZ;AACA+B,IAAAA,KAAK,CAAC,kCAAD,EAAqC;AACtCC,MAAAA,MAAM,EAAE,MAD8B;AAEtCC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAiBlC,KAAK,CAACmC,QAAN,CAAeC;AAF3B,OAF6B;AAMlCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBpC,QAAAA,IAAI,EAAEF,QAAQ,CAACE,IADE;AAEjBC,QAAAA,WAAW,EAAEH,QAAQ,CAACG,WAFL;AAGjBC,QAAAA,QAAQ,EAAEJ,QAAQ,CAACI,QAHF;AAIjBC,QAAAA,UAAU,EAAEL,QAAQ,CAACK,UAJJ;AAKjBC,QAAAA,UAAU,EAAEN,QAAQ,CAACM,UALJ;AAMjBC,QAAAA,QAAQ,EAAEP,QAAQ,CAACO,QANF;AAOjBC,QAAAA,QAAQ,EAAER,QAAQ,CAACQ,QAPF;AAQjBE,QAAAA,aAAa,EAAEV,QAAQ,CAACU,aARP;AASjBC,QAAAA,WAAW,EAAEX,QAAQ,CAACW,WATL;AAUjBF,QAAAA,eAAe,EAAE;AAVA,OAAf;AAN4B,KAArC,CAAL,CAmBS8B,IAnBT,CAmBcC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAnBrB,EAoBSF,IApBT,CAoBeG,IAAD,IAAU;AACZ,UAAGA,IAAI,CAAChB,EAAR,EAAY;AACR3B,QAAAA,KAAK,CAAC4C,OAAN,CAAcD,IAAd;AACH;;AACDzC,MAAAA,cAAc,CAAC;AACXC,QAAAA,IAAI,EAAE,EADK;AAEXC,QAAAA,WAAW,EAAE,EAFF;AAGXC,QAAAA,QAAQ,EAAE,EAHC;AAIXC,QAAAA,UAAU,EAAE,EAJD;AAKXC,QAAAA,UAAU,EAAE,EALD;AAMXC,QAAAA,QAAQ,EAAE,EANC;AAOXC,QAAAA,QAAQ,EAAE,EAPC;AAQXE,QAAAA,aAAa,EAAE,UARJ;AASXC,QAAAA,WAAW,EAAE,CATF;AAUXF,QAAAA,eAAe,EAAE;AAVN,OAAD,CAAd;AAaH,KArCT;AAsCH,GAzCD;;AA6CA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAEoB,YAAhB;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEQ;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAyB,QAAA,QAAQ,EAAER,YAAnC;AAAiD,QAAA,KAAK,EAAErB,QAAQ,CAACE,IAAjE;AAAuE,QAAA,EAAE,EAAC,MAA1E;AAAiF,QAAA,IAAI,EAAC,MAAtF;AAA6F,QAAA,IAAI,EAAC;AAAlG;AAAA;AAAA;AAAA;AAAA,cAFR,eAGI;AAAO,QAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAIQ;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAyB,QAAA,QAAQ,EAAEmB,YAAnC;AAAiD,QAAA,KAAK,EAAErB,QAAQ,CAACG,WAAjE;AAA8E,QAAA,EAAE,EAAC,MAAjF;AAAwF,QAAA,IAAI,EAAC,MAA7F;AAAoG,QAAA,IAAI,EAAC;AAAzG;AAAA;AAAA;AAAA;AAAA,cAJR,eAKI;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMQ;AAAQ,QAAA,QAAQ,EAAEkB,YAAlB;AAAgC,QAAA,SAAS,EAAC,QAA1C;AAAmD,QAAA,KAAK,EAAErB,QAAQ,CAACI,QAAnE;AAA6E,QAAA,IAAI,EAAC,UAAlF;AAA6F,QAAA,IAAI,EAAC,UAAlG;AAAA,gCACI;AAAQ,UAAA,KAAK,EAAC,EAAd;AAAiB,UAAA,QAAQ,MAAzB;AAA0B,UAAA,QAAQ,MAAlC;AAAmC,UAAA,MAAM,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANR,eAYI;AAAO,QAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ,eAaQ;AAAQ,QAAA,SAAS,EAAC,QAAlB;AAA2B,QAAA,QAAQ,EAAEiB,YAArC;AAAmD,QAAA,KAAK,EAAErB,QAAQ,CAACK,UAAnE;AACA,QAAA,IAAI,EAAC,UADL;AACgB,QAAA,IAAI,EAAC,YADrB;AAAA,gCAEI;AAAQ,UAAA,KAAK,EAAC,EAAd;AAAiB,UAAA,QAAQ,MAAzB;AAA0B,UAAA,QAAQ,MAAlC;AAAmC,UAAA,MAAM,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAbR,eAoBI;AAAO,QAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBJ,eAqBQ;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAyB,QAAA,QAAQ,EAAEgB,YAAnC;AAAiD,QAAA,KAAK,EAAErB,QAAQ,CAACM,UAAjE;AAA6E,QAAA,IAAI,EAAC,MAAlF;AAAyF,QAAA,IAAI,EAAC;AAA9F;AAAA;AAAA;AAAA;AAAA,cArBR,eAsBI;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBJ,eAuBQ;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAyB,QAAA,QAAQ,EAAEe,YAAnC;AAAiD,QAAA,KAAK,EAAErB,QAAQ,CAACO,QAAjE;AAA2E,QAAA,IAAI,EAAC,MAAhF;AAAuF,QAAA,IAAI,EAAC;AAA5F;AAAA;AAAA;AAAA;AAAA,cAvBR,eAwBI;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBJ,eAyBQ;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAyB,QAAA,QAAQ,EAAEc,YAAnC;AAAiD,QAAA,KAAK,EAAErB,QAAQ,CAACQ,QAAjE;AAA2E,QAAA,EAAE,EAAC,MAA9E;AAAqF,QAAA,IAAI,EAAC,MAA1F;AAAiG,QAAA,IAAI,EAAC;AAAtG;AAAA;AAAA;AAAA;AAAA,cAzBR,eA2BI;AAAO,QAAA,QAAQ,EAAEiB,iBAAjB;AAAoC,QAAA,OAAO,EAAEzB,QAAQ,CAACU,aAAT,KAA2B,UAAxE;AAAoF,QAAA,IAAI,EAAC,eAAzF;AAAyG,QAAA,KAAK,EAAC,UAA/G;AAA0H,QAAA,EAAE,EAAC,UAA7H;AAAwI,QAAA,IAAI,EAAC;AAA7I;AAAA;AAAA;AAAA;AAAA,cA3BJ,eA6BI;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7BJ,eAiCI;AAAO,QAAA,QAAQ,EAAEe,iBAAjB;AAAoC,QAAA,OAAO,EAAEzB,QAAQ,CAACU,aAAT,KAA2B,MAAxE;AAAgF,QAAA,IAAI,EAAC,eAArF;AAAqG,QAAA,KAAK,EAAC,MAA3G;AAAkH,QAAA,EAAE,EAAC,MAArH;AAA4H,QAAA,IAAI,EAAC;AAAjI;AAAA;AAAA;AAAA;AAAA,cAjCJ,eAmCI;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnCJ,eA4CQ;AAAQ,QAAA,QAAQ,EAAEW,YAAlB;AAAgC,QAAA,KAAK,EAAErB,QAAQ,CAACW,WAAhD;AAA6D,QAAA,IAAI,EAAC,aAAlE;AAAA,gCACI;AAAQ,UAAA,KAAK,EAAE,CAAf;AAAkB,UAAA,QAAQ,MAA1B;AAA2B,UAAA,QAAQ,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKS,YAAY,CAACN,GAAb,CAAiB,CAAC8B,cAAD,EAAiBC,KAAjB,kBACd;AAAgC,UAAA,KAAK,EAAED,cAAc,CAAClB,EAAtD;AAAA,oBAA2DkB,cAAc,CAAC1C;AAA1E,WAAa0C,cAAc,CAAClB,EAA5B;AAAA;AAAA;AAAA;AAAA,gBADH,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,cA5CR,eA4DI;AAAO,QAAA,OAAO,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5DJ,eA6DQ;AAAO,QAAA,QAAQ,EAAEL,YAAjB;AAA+B,QAAA,KAAK,EAAErB,QAAQ,CAACS,eAA/C;AAAgE,QAAA,IAAI,EAAC,UAArE;AAAgF,QAAA,IAAI,EAAC;AAArF;AAAA;AAAA;AAAA;AAAA,cA7DR,eA8DI;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAuB,QAAA,IAAI,EAAC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9DJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoEH;;GAlKuBX,W;;KAAAA,W","sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'\n\nexport default function NewTaskForm(props) {\n\n    const [taskInfo, setNewTaskInfo] = useState({\n        name: '', \n        description: '', \n        priority: '', \n        difficulty: '', \n        start_date: '', \n        end_date: '',\n        duration: '',\n        status_complete: false,\n        taskable_type: \"Category\",\n        taskable_id: 0\n    })\n    // const [goals, setGoals] = useState([])\n\n    // useEffect(() => {\n    //     const foundCategory = props.categories.find((category) => (\n    //         category.id === parseInt(taskInfo.category)))\n    //     let potentialGoals = foundCategory ? foundCategory.goals : []\n    //     setGoals(potentialGoals)\n    // }, [taskInfo.category])\n    \n    let allGoals = props.categories.map((category) => {\n        let modifiedGoals = category.goals.map((goal) => {\n            return {...goal, name: `${category.name} - ${goal.name}`}\n        })\n        return modifiedGoals \n    }).flat()\n\n    let arrOfOptions = taskInfo.taskable_type === \"Category\" ? props.categories : allGoals\n\n    const handleChange = (e) => {\n        setNewTaskInfo({\n            ...taskInfo,\n            [e.target.name]: e.target.value, \n        }) \n    }\n\n    const handleChangeRadio = (e) => {\n        setNewTaskInfo({\n            ...taskInfo,\n            [e.target.name]: e.target.value, \n            taskable_id: arrOfOptions[0] ? arrOfOptions[0].id : 0\n        }) \n    }\n\n    console.log(taskInfo)\n\n    const handleSubmit = (e) => { \n        e.preventDefault()\n        console.log(taskInfo)\n        fetch(\"http://localhost:3000/createtask\", {\n            method: \"POST\", \n            headers: {\n                \"content-type\": \"application/json\",\n                \"authorization\": props.userInfo.token\n                }, \n                body: JSON.stringify({\n                    name: taskInfo.name, \n                    description: taskInfo.description, \n                    priority: taskInfo.priority, \n                    difficulty: taskInfo.difficulty, \n                    start_date: taskInfo.start_date, \n                    end_date: taskInfo.end_date,\n                    duration: taskInfo.duration,\n                    taskable_type: taskInfo.taskable_type, \n                    taskable_id: taskInfo.taskable_id,\n                    status_complete: false\n                })\n            })\n                .then(res => res.json())\n                .then((task) => {\n                    if(task.id) {\n                        props.addTask(task)\n                    }\n                    setNewTaskInfo({\n                        name: '', \n                        description: '', \n                        priority: '', \n                        difficulty: '', \n                        start_date: '', \n                        end_date: '',\n                        duration: '',\n                        taskable_type: 'Category',\n                        taskable_id: 0,\n                        status_complete: false\n                    })\n\n                })\n    }\n\n    \n\n    return (\n        <div className=\"field\">\n            <form onSubmit={handleSubmit}>\n                <label htmlFor=\"name\">Name</label>\n                    <input className=\"input\" onChange={handleChange} value={taskInfo.name} id=\"text\" type=\"text\" name=\"name\"/>\n                <label htmlFor=\"description\">Description</label>\n                    <input className=\"input\" onChange={handleChange} value={taskInfo.description} id=\"text\" type=\"text\" name=\"description\"/>\n                <label htmlFor=\"priority\">Priority</label>\n                    <select onChange={handleChange} className=\"select\" value={taskInfo.priority} type=\"category\" name=\"priority\">\n                        <option value=\"\" disabled selected hidden>Select</option>\n                        <option>Must</option>\n                        <option>Should</option>\n                        <option>Want</option>\n                    </select>\n                <label htmlFor=\"difficulty\">Difficulty</label>\n                    <select className=\"select\" onChange={handleChange} value={taskInfo.difficulty} \n                    type=\"category\" name=\"difficulty\">\n                        <option value=\"\" disabled selected hidden>Select</option>\n                        <option>Worst</option>\n                        <option>Not Bad</option>\n                        <option>Easy</option>\n                    </select>\n                <label htmlFor=\"start_date\">Start Date</label>\n                    <input className=\"input\" onChange={handleChange} value={taskInfo.start_date} type=\"date\" name=\"start_date\"/>\n                <label htmlFor=\"end_date\">End Date</label>\n                    <input className=\"input\" onChange={handleChange} value={taskInfo.end_date} type=\"date\" name=\"end_date\"/>\n                <label htmlFor=\"duration\">Duration</label>\n                    <input className=\"input\" onChange={handleChange} value={taskInfo.duration} id=\"text\" type=\"text\" name=\"duration\"/>\n                \n                <input onChange={handleChangeRadio} checked={taskInfo.taskable_type === \"Category\"} name='taskable_type' value=\"Category\" id=\"Category\" type='radio'/>\n\n                <label htmlFor=\"Category\">\n                    Category\n                </label>    \n\n                <input onChange={handleChangeRadio} checked={taskInfo.taskable_type === \"Goal\"} name='taskable_type' value=\"Goal\" id=\"Goal\" type='radio'/>\n\n                <label htmlFor=\"Goal\">\n                    Goal\n                </label>   \n\n\n\n\n\n                {/* <label htmlFor=\"category\">Category</label> */}\n                    <select onChange={handleChange} value={taskInfo.taskable_id} name=\"taskable_id\">\n                        <option value={0} disabled selected>Select</option>\n                        {arrOfOptions.map((taskableOption, index) => (\n                            <option key={taskableOption.id} value={taskableOption.id}>{taskableOption.name}</option>\n                        ))}\n                    </select>\n\n\n\n                {/* <label htmlFor=\"goal\">Goal</label>\n                    <select onChange={handleChange} value={taskInfo.goal} type=\"text\"name=\"goal\">\n                        <option value=\"\" disabled selected hidden>Select</option>\n                        {goals.map((goals, index) => (\n                            <option key={goals.id} value={goals.id}>{goals.name}</option>\n                        ))}\n                    </select> */}\n                <label htmlFor=\"status_complete\">Complete</label>\n                    <input onChange={handleChange} value={taskInfo.status_complete} type=\"checkbox\" name=\"status_complete\"/>\n                <button value=\"submit\" type=\"submit\">Create Task</button>\n            </form>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}